<!DOCTYPE html> 
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>The Company News Tracker</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #121212;
            color: #e0e0e0;
        }
        .container {
            max-width: 800px;
        }
        .card {
            background-color: #1f1f1f;
            transition: transform 0.2s, box-shadow 0.2s;
        }
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
        }
        .loading-spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid #3b82f6;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="p-4 sm:p-8">

    <div class="container mx-auto">
        <!-- Header Section -->
        <header class="text-center mb-8">
            <h1 class="text-3xl sm:text-4xl md:text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 to-blue-500 mb-2">
                The Company News Tracker
            </h1>
            <p class="text-sm sm:text-base text-gray-400">
                Automatically deliver news articles related to the Sam Gor syndicate.
            </p>
        </header>

        <!-- Search Form -->
        <div class="mb-8 p-6 bg-gray-800 rounded-xl shadow-lg">
            <div class="relative mb-4">
                <input id="searchInput" type="text" placeholder="e.g. 'Sam Gor news', 'The Company arrest'"
                       value="Bellingcat Sam Gor"
                       class="w-full p-3 pl-10 rounded-lg bg-gray-700 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all">
                <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
                    <svg class="w-5 h-5 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path>
                    </svg>
                </div>
            </div>
            <button id="searchButton"
                    class="w-full py-3 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transition-colors">
                Search Articles
            </button>
            <div id="loading" class="hidden flex justify-center mt-4">
                <div class="loading-spinner"></div>
            </div>
            <div id="statusMessage" class="hidden mt-4 text-center text-red-400"></div>
        </div>

        <!-- News Results Container -->
        <div id="resultsContainer" class="grid gap-6">
            <!-- Initial content will be loaded here via JS -->
        </div>

    </div>

    <script>
        // Use a self-invoking async function to run the application logic
        (async function() {
            const searchInput = document.getElementById('searchInput');
            const searchButton = document.getElementById('searchButton');
            const resultsContainer = document.getElementById('resultsContainer');
            const loadingIndicator = document.getElementById('loading');
            const statusMessage = document.getElementById('statusMessage');

            // Function to display a temporary message
            function showMessage(message, isError = false) {
                statusMessage.textContent = message;
                statusMessage.classList.remove('hidden');
                statusMessage.classList.toggle('text-red-400', isError);
                statusMessage.classList.toggle('text-green-400', !isError);
                setTimeout(() => {
                    statusMessage.classList.add('hidden');
                }, 5000);
            }

            // Function to fetch news articles
            async function fetchNews(query) {
                loadingIndicator.classList.remove('hidden');
                resultsContainer.innerHTML = '';
                statusMessage.classList.add('hidden');

                const payload = {
                    contents: [{
                        parts: [{
                            text: `Find recent news articles about "${query}". For each article, provide the title, a short summary (snippet), the source title, and the URL. Format the response as a JSON array of objects, with each object having keys 'title', 'snippet', 'source_title', and 'url'. The response should be in JSON format only. Prioritize free-to-read sources and reputable investigative journalism outlets like Bellingcat.`
                        }]
                    }],
                    generationConfig: {
                        responseMimeType: "application/json",
                        responseSchema: {
                            type: "ARRAY",
                            items: {
                                type: "OBJECT",
                                properties: {
                                    "title": { "type": "STRING" },
                                    "snippet": { "type": "STRING" },
                                    "source_title": { "type": "STRING" },
                                    "url": { "type": "STRING" }
                                },
                                propertyOrdering: ["title", "snippet", "source_title", "url"]
                            }
                        }
                    }
                };

                const apiKey = "";
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

                let response;
                let retries = 0;
                const maxRetries = 5;
                const baseDelay = 1000;

                while (retries < maxRetries) {
                    try {
                        response = await fetch(apiUrl, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(payload)
                        });

                        if (response.status === 429) {
                            // Exponential backoff for rate limiting
                            const delay = baseDelay * Math.pow(2, retries);
                            console.log(`Rate limit hit. Retrying in ${delay / 1000}s...`);
                            await new Promise(res => setTimeout(res, delay));
                            retries++;
                            continue;
                        }

                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }

                        const result = await response.json();
                        const rawText = result?.candidates?.[0]?.content?.parts?.[0]?.text;

                        if (!rawText) {
                            throw new Error('API response is missing content.');
                        }
                        
                        const newsArticles = JSON.parse(rawText);
                        displayArticles(newsArticles);
                        break; // Exit loop on success

                    } catch (error) {
                        console.error('Error fetching data:', error);
                        showMessage('Failed to retrieve news. Please try again.', true);
                        break; // Exit loop on failure
                    } finally {
                        loadingIndicator.classList.add('hidden');
                    }
                }
            }

            // Function to display the articles on the page
            function displayArticles(articles) {
                if (articles.length === 0) {
                    resultsContainer.innerHTML = `<p class="text-center text-gray-500">No articles found for this query.</p>`;
                    return;
                }
                
                articles.forEach(article => {
                    const card = document.createElement('div');
                    card.className = "card p-6 rounded-xl shadow-lg";
                    card.innerHTML = `
                        <h2 class="text-lg sm:text-xl font-semibold text-white mb-2">${article.title}</h2>
                        <p class="text-sm text-gray-400 mb-4">${article.snippet}</p>
                        <a href="${article.url}" target="_blank" class="text-xs text-blue-400 font-medium hover:underline">Read Full Article</a>
                    `;
                    resultsContainer.appendChild(card);
                });
            }

            // Initial search when the page loads
            fetchNews(searchInput.value);

            // Event listener for the search button
            searchButton.addEventListener('click', () => {
                const query = searchInput.value.trim();
                if (query) {
                    fetchNews(query);
                } else {
                    showMessage('Please enter a search query.', true);
                }
            });

            // Allow pressing Enter in the input field to trigger search
            searchInput.addEventListener('keypress', (event) => {
                if (event.key === 'Enter') {
                    event.preventDefault();
                    searchButton.click();
                }
            });
        })();
    </script>
</body>
</html>
